import pandas as pd
import numpy as np

class Preprocessing:
    def __init__(self):
        self.df_raw = None
        self.df_clean = None
        self.df_features = None

    def load_data(self, file_path: str) -> pd.DataFrame:
        df = pd.read_csv(file_path)  # ← remove delimiter=';' because it's actually comma-separated
        df.columns = df.columns.str.strip()  # Strip any extra whitespace
        print("Columns loaded:", df.columns.tolist())  # Optional debug print
        df['Timestamp'] = pd.to_datetime(df['Timestamp'], unit='s')  # Your timestamps are in UNIX seconds
        df = df.sort_values('Timestamp').reset_index(drop=True)
        self.df_raw = df
        return df


    def clean_data(self, df: pd.DataFrame) -> pd.DataFrame:
        """
        Clean the raw data:
        - Handle missing values by forward filling and backward filling.
        - Remove or cap outliers using winsorization on price columns.
        """
        df_clean = df.copy()

        # Fill missing values
        df_clean.fillna(method='ffill', inplace=True)
        df_clean.fillna(method='bfill', inplace=True)

        # Outlier treatment: winsorize at 1st and 99th percentile for price columns
        price_cols = ['Open', 'High', 'Low', 'Close']
        for col in price_cols:
            lower = df_clean[col].quantile(0.01)
            upper = df_clean[col].quantile(0.99)
            df_clean[col] = np.clip(df_clean[col], lower, upper)

        # For Volume, replace missing or zero with median volume
        median_vol = df_clean['Volume'].median()
        df_clean['Volume'] = df_clean['Volume'].replace(0, np.nan)
        df_clean['Volume'].fillna(median_vol, inplace=True)

        self.df_clean = df_clean
        return df_clean

    def create_features(self, df: pd.DataFrame) -> pd.DataFrame:
        """
        Create features to help prediction:
        - Lagged close prices (t-1, t-2, t-3)
        - Moving averages (7-day, 30-day)
        - RSI (Relative Strength Index, 14-period)
        - MACD (12, 26, 9)
        """
        df_feat = df.copy()

        # Lagged prices (close)
        for lag in [1, 2, 3]:
            df_feat[f'close_t-{lag}'] = df_feat['Close'].shift(lag)

        # Moving averages (in minutes, assuming data is 1-min freq, so 7-day = 7*24*60 = 10080 minutes)
        # Here, it's 1-min data, so 7-day MA = window=10080, 30-day MA=43200
        # But these are huge windows. Usually, moving averages in trading use fewer periods for minute data.
        # Instead, let's do 7 * 60 = 420 (7 hours) and 30 * 60 = 1800 (30 hours) moving averages for demo.
        df_feat['MA_7h'] = df_feat['Close'].rolling(window=420).mean()
        df_feat['MA_30h'] = df_feat['Close'].rolling(window=1800).mean()

        # RSI - Relative Strength Index, period=14
        delta = df_feat['Close'].diff()
        gain = delta.where(delta > 0, 0)
        loss = -delta.where(delta < 0, 0)
        avg_gain = gain.rolling(window=14).mean()
        avg_loss = loss.rolling(window=14).mean()
        rs = avg_gain / avg_loss
        df_feat['RSI_14'] = 100 - (100 / (1 + rs))

        # MACD (12, 26, 9)
        ema_12 = df_feat['Close'].ewm(span=12, adjust=False).mean()
        ema_26 = df_feat['Close'].ewm(span=26, adjust=False).mean()
        df_feat['MACD'] = ema_12 - ema_26
        df_feat['MACD_signal'] = df_feat['MACD'].ewm(span=9, adjust=False).mean()
        df_feat['MACD_diff'] = df_feat['MACD'] - df_feat['MACD_signal']

        # Drop rows with NaNs generated by shifting/rolling
        df_feat = df_feat.dropna().reset_index(drop=True)

        self.df_features = df_feat
        return df_feat
